'use strict';

// Declare app level module which depends on views, and components
angular.module('myApp', [
    'ngRoute','ngMaterial']).
    config(['$routeProvider', function($routeProvider) {
        $routeProvider
            .when('/songs', {
                templateUrl: 'app/templates/songs.html',
                controller: 'SongsCtrl'
            })
            .when('/albums', {
                templateUrl: 'app/templates/albums.html',
                controller: 'AlbumsCtrl'
            })
            //.when('/results', {
            //    templateUrl: 'app/templates/results.html',
            //    controller: 'ResultsCtrl'
            //})
            .otherwise({
                redirectTo: '/albums'
            });


    }]);
var app = angular.module("myApp")
    .service("dataService", ['$http', '$q', function ($http, $q, ENV) {

        var service = {};

        service.albumSongHash = {};
        service.all_songs = [];

        service.albumsGet = function () {
            var deferred = $q.defer();


            $http.get('api/all-albums', {cache: true}).
                then(function (response) {
                    response.data.features.forEach(function (v) {
                        v.properties.selected = false;
                        service.albumSongHash[v.properties.title] = {};
                        service.albumSongHash[v.properties.title].selected = false;
                        service.albumSongHash[v.properties.title].songs = [];
                    });

                    deferred.resolve(service.albumSongHash);

                }, function (response) {
                    deferred.reject(response);
                });

            return deferred.promise;

        };

        service.songsGet = function () {
            var deferred = $q.defer();
            service.all_songs = [];

            $http.get('api/songs', {cache: true}).
                then(function (response) {

                    response.data.features.forEach(function (s) {
                        var album = s.properties.album_title;
                        var song = s.properties.song_title;
                        service.all_songs.push({"title":song, "id": s.properties.id, "selected":false});
                        service.albumSongHash[album].songs.push({label:song, id: s.properties.id, selected:false});
                    });

                    deferred.resolve(service.all_songs);



                }, function (response){
                    deferred.reject(response);
                });

            return deferred.promise;

        };

        service.songVotesGet = function () {
            var deferred = $q.defer();

            $http.get('api/song-votes', {cache: false}).
                then(function (response) {
                    deferred.resolve(response.data);

                }, function (response){
                    deferred.reject(response);
                });

            return deferred.promise;

        };

        service.albumVotesGet = function () {
            var deferred = $q.defer();

            $http.get('api/album-votes', {cache: true}).
                then(function (response) {
                    deferred.resolve(response.data);

                }, function (response){
                    deferred.reject(response);
                });

            return deferred.promise;

        };

        service.vote = function (songsIds){
            var deferred = $q.defer();

            var data = JSON.stringify({song:songsIds});

            $http.post('api/songs',data, {headers: {'Content-type': 'application/json'}})
                .then(function (response) {
                    deferred.resolve(response);
                }, function (response){
                    deferred.reject(response);
                });

            return deferred.promise;
        };

        return service;
    }]);


/** State service handles
 *  statefulness and redirects
 */

var app = angular.module("myApp")
    .service("stateService", function ($stateParams, $state, $http, $q, $rootScope) {

        var stateService = {};

        // validate param is in URL
        stateService.isParam = function (paramName) {
            var bool = $stateParams[paramName];
            if (bool) {
                return true;
            }
            return false;
        };

        // check if a param is a particular value
        stateService.isParamVal = function (paramName, val) {
            return $stateParams[paramName] == val;
        };

        // validate param is NOT in URL
        stateService.isNotParam = function (paramName) {
            var bool = $stateParams[paramName];
            if (bool) {
                return false;
            }
            return true;
        };

        // toggle a panel parameter (open/closed)
        stateService.toggleParam = function (paramName) {
            var bool = $stateParams[paramName];
            if (!bool) {
                // mutex logic that makes only 1 panel open at a time
                for (var param in $stateParams) {
                    if ($stateParams[param] === 'open') {
                        $stateParams[param] = null;
                    }
                }
                $stateParams[paramName] = 'open';
            } else {
                delete $stateParams[paramName];
            }
            var state = $state.current.name || 'home';
            stateService.setState(state, $stateParams, false);
        };

        // open a panel parameter
        stateService.openParam = function (paramName) {
            var bool = $stateParams[paramName];
            if (!bool) {
                // mutex logic that makes only 1 panel open at a time
                for (var param in $stateParams) {
                    if ($stateParams[param] === 'open') {
                        $stateParams[param] = null;
                    }
                }
                $stateParams[paramName] = 'open';
                var state = $state.current.name || 'home';
                stateService.setState(state, $stateParams, false);
            }
        };

        // close a panel parameter
        stateService.closeParam = function (paramName) {
            var bool = $stateParams[paramName];
            if (bool) {
                delete $stateParams[paramName];
                var state = $state.current.name || 'home';
                stateService.setState(state, $stateParams, false);
            }
        };

        // set a parameter with a passed value
        stateService.setParamWithVal = function (paramName, val) {
            $stateParams[paramName] = val;
            var state = $state.current.name || 'home';
            stateService.setState(state, $stateParams, false);
        };

        // set state
        stateService.setState = function (state, params, reload) {
            if (reload) {
                $state.go(state, params);
            }
            else {
                $state.go(state, params, {
                    // prevent the events onStart and onSuccess from firing
                    notify: false,
                    // prevent reload of the current state
                    reload: false,
                    // replace the last record when changing the params so you don't hit the back button and get old params
                    location: 'replace',
                    // inherit the current params on the url
                    inherit: true
                });
            }
            // broadcast the url has been updated
            $rootScope.$broadcast('route-update');
        }

        return stateService;
    });
angular.module('myApp')
    .controller('AlbumsCtrl', function ($rootScope,$scope,$http,$mdSidenav,dataService) {

        $scope.albumSongHash = {};
        $scope.showSong = false;
        $scope.test = '';
        $scope.all_songs = [];
        $scope.searchText = '';
        $rootScope.votes = [];

        $scope.toggleRight = $rootScope.buildToggler('right');

        $scope.processSelection = function() {
            var selectedSongs = [];

            Object.keys($scope.albumSongHash).forEach(function(key){
                $scope.albumSongHash[key].songs.forEach(function(s){
                    if(s.selected === true){
                        selectedSongs.push(s);
                    }
                })
            });

            $rootScope.votes = selectedSongs;
            $rootScope.$broadcast('song-vote', selectedSongs);

        };

        $scope.$on('song-remove', function(evt, song){

            Object.keys($scope.albumSongHash).forEach(function(key){
                $scope.albumSongHash[key].songs.forEach(function(s){
                    if(song.id === s.id){
                        s.selected = false
                    }
                })
            });
            
            $scope.processSelection();
        });

        $scope.$on('clear-all-selections', function () {
            Object.keys($scope.albumSongHash).forEach(function(key){
                $scope.albumSongHash[key].songs.forEach(function(s){
                    s.selected = false
                })
            });

            $scope.processSelection();

            // close right navigation
            $mdSidenav('right').close();
        });

        $scope.toggleSong = function(album){
            $scope.albumSongHash[album].selected = !$scope.albumSongHash[album].selected;
        };

        var promise = dataService.albumsGet();

        promise.then(function(response){
            $scope.albumSongHash = response;

            return dataService.songsGet();
        }).then(function(response){

            $scope.all_songs = response;
        });
    });
angular.module('myApp')
    .controller('MainCtrl', function ($rootScope, $scope, $http, $timeout, $mdSidenav, $mdToast, $mdUtil, $mdBottomSheet, $log, dataService) {

        $rootScope.buildToggler = function (navID) {
            var debounceFn = $mdUtil.debounce(function () {
                $mdSidenav(navID)
                    .toggle()
            }, 200);
            return debounceFn;
        };

        $rootScope.showSimpleToast = function(position, text) {
            $mdToast.show(
                $mdToast.simple()
                    .textContent(text)
                    .position(position)
                    .hideDelay(3000)
            );
        };

        $scope.toggleLeft = $rootScope.buildToggler('left');
        $scope.toggleRight = $rootScope.buildToggler('right');

        $scope.votes = [];
        $scope.voteLength = 0;

        $scope.closeNav = function (navId) {
            $mdSidenav(navId).close()
        };

        $scope.$on('song-vote', function (evt, song) {
            $scope.votes = song;
            $scope.voteLength = $scope.votes.length;
        });

        $scope.removeSong = function (song) {
            $rootScope.$broadcast('song-remove', song);
        };

        $scope.openMenu = function ($mdOpenMenu, event) {
            console.log('openMenu');
            $mdOpenMenu(event);
        };

        $scope.listItemClick = function ($index) {
            var clickedItem = $scope.items[$index];
            $mdBottomSheet.hide(clickedItem);
        };

        /**
         * Submit user votes
         */
        $scope.sendVotes = function () {

            var voteIds = [];

            $rootScope.votes.forEach(function (v, i) {
                voteIds.push(v.id)
            });

            var promise = dataService.vote(voteIds);
            promise
                .then(function (res) {
                    // close nav bar and give success message
                    $scope.closeNav('right');
                    $rootScope.showSimpleToast('bottom', 'Thanks for your votes!')

                })
                .catch(function (err) {
                    // show error
                    $rootScope.showSimpleToast('bottom', err.data.message);

                })
        };

        /**
         * clear all song selections
         */
        $scope.clearAllSongs = function () {
            $rootScope.$broadcast('clear-all-selections');
        };
    });


angular.module('myApp')
    .controller('ResultsCtrl', function ($rootScope, $scope, $http, dataService, $window) {

        //var width = $window.outerWidth * .9;
        //var height =$window.outerHeight * .6;
        //
        //var selectedAlbum = '';
        //var songStartXAxis;
        //
        //var isSong = false;
        //
        //var x = d3.scale.ordinal()
        //    .rangeRoundBands([0, width], .1);
        //
        //var y = d3.scale.linear()
        //    .range([height, 0]);
        //
        //var chart = d3.select(".chart")
        //    .attr("width", width)
        //    .attr("height", height);
        //
        //angular.element($window).bind('resize', function () {
        //    width = $window.outerWidth * .9;
        //    height = $window.outerHeight * .6;
        //
        //    if(!isSong){
        //        resizeAlbumVoteChart(albumVoteData);
        //    } else {
        //        resizeSongVoteChart(songStartXAxis,selectedAlbum,songData);
        //    }
        //
        //    //createAlbumVoteChart(null);
        //});
        //
        //var albumVoteData = [];
        //var songData = [];
        //
        //function resizeAlbumVoteChart(data) {
        //
        //    isSong = false;
        //
        //    $(".chart").empty();
        //
        //    var chart = d3.select(".chart")
        //        .attr("width", width)
        //        .attr("height", height);
        //
        //    y.domain([0, d3.max(data, function (d) {
        //        return d.votes;
        //    })]);
        //
        //    var barWidth = width / data.length;
        //
        //    var bar = chart.selectAll("g")
        //        .data(data)
        //        .enter().append("g");
        //
        //        bar.attr("transform", function (d, i) {
        //            return "translate(" + i * barWidth + ",0)";
        //        });
        //
        //    bar.transition()
        //        .delay(function (d, i) {
        //            return i * 150;
        //        })
        //        .attr("transform", function (d, i) {
        //            return "translate(" + i * barWidth + ",0)";
        //        });
        //
        //    bar.append("rect")
        //        .attr("y", function (d) {
        //            return y(d.votes);
        //        })
        //        .attr("height", function (d) {
        //            return height - y(d.votes);
        //        })
        //        .attr("width", barWidth - 1);
        //
        //
        //    bar.on('click', function (e, i) {
        //
        //        selectedAlbum = e.album;
        //
        //        var rect = chart.selectAll("g");
        //
        //        rect.transition().attr("transform", "translate(" + i * barWidth + ",0)");
        //
        //        setTimeout(function () {
        //                createSongVoteChart(e.album, i * barWidth, false)
        //            }, 200
        //        )
        //    });
        //
        //    bar.append("text")
        //        .attr("x", barWidth / 2)
        //        .attr("y", function (d) {
        //            return y(d.votes) + 3;
        //        })
        //        .attr("dy", "1.75em")
        //        .text(function (d) {
        //            return d.votes;
        //        });
        //}
        //
        //function resizeSongVoteChart (start,album,dataArr) {
        //
        //    isSong = true;
        //
        //    $(".chart").empty();
        //
        //    var chart = d3.select(".chart")
        //        .attr("width", width)
        //        .attr("height", height);
        //
        //    var data = dataArr.filter(function (v) {
        //        return v.album == album;
        //    });
        //
        //    y.domain([0, d3.max(data, function (d) {
        //        return d.votes;
        //    })]);
        //
        //    var barWidth = width / data.length;
        //
        //    var bar = chart.selectAll("g")
        //        .data(data)
        //        .enter().append("g")
        //        .attr("transform", function (d, i) {
        //            return "translate(" + i * barWidth + ",0)";
        //        });
        //
        //        bar.transition()
        //            .delay(function (d, i) {
        //                return i * 150;
        //            })
        //            .attr("transform", function (d, i) {
        //                return "translate(" + i * barWidth + ",0)";
        //            });
        //
        //    bar.append("rect")
        //        .attr("y", function (d) {
        //            return y(d.votes);
        //        })
        //        .attr("height", function (d) {
        //            return height - y(d.votes);
        //        })
        //        .attr("width", barWidth - 1);
        //
        //
        //    bar.append("text")
        //        .attr("x", barWidth / 2)
        //        .attr("y", function (d) {
        //            return y(d.votes) + 3;
        //        })
        //        .attr("dy", "1.75em")
        //        .text(function (d) {
        //            return d.song;
        //        });
        //
        //    //bar.on('click',function(d,i){
        //    //    //vote using the id of the song and the first round
        //    //    var promise = dataService.vote(d.song_id, 1);
        //    //
        //    //    promise.then(function(response) {
        //    //
        //    //        console.log(response);
        //    //
        //    //        createSongVoteChart(album, start, true);
        //    //
        //    //    });
        //    //
        //    //})
        //
        //}
        //
        //function createAlbumVoteChart(start) {
        //
        //    isSong = false;
        //
        //    var promise = dataService.albumVotesGet();
        //
        //    promise.then(function (response) {
        //
        //        var data = [];
        //
        //        response.features.forEach(function (v) {
        //            data.push(v.properties);
        //            albumVoteData.push(v.properties);
        //        });
        //
        //        $(".chart").empty();
        //
        //        y.domain([0, d3.max(data, function (d) {
        //            return d.votes;
        //        })]);
        //
        //        var barWidth = width / data.length;
        //
        //        var bar = chart.selectAll("g")
        //            .data(data)
        //            .enter().append("g");
        //
        //        if (start == null){
        //            bar.attr("transform", function (d, i) {
        //                return "translate(" + i * barWidth + ",0)";
        //            });
        //        } else {
        //            bar.attr("transform", "translate(" + start * barWidth + ",0)");
        //        }
        //
        //
        //        bar.transition()
        //            .delay(function (d, i) {
        //                return i * 150;
        //            })
        //            .attr("transform", function (d, i) {
        //                return "translate(" + i * barWidth + ",0)";
        //            });
        //
        //        bar.append("rect")
        //            .attr("y", function (d) {
        //                return y(d.votes);
        //            })
        //            .attr("height", function (d) {
        //                return height - y(d.votes);
        //            })
        //            .attr("width", barWidth - 1);
        //
        //
        //        bar.on('click', function (e, i) {
        //
        //            selectedAlbum = e.album;
        //
        //            songStartXAxis = i * barWidth;
        //
        //            var rect = chart.selectAll("g");
        //
        //            rect.transition().attr("transform", "translate(" + i * barWidth + ",0)");
        //
        //            setTimeout(function () {
        //                    createSongVoteChart(e.album, i * barWidth, false)
        //                }, 200
        //            )
        //        });
        //
        //        bar.append("text")
        //            .attr("x", barWidth / 2)
        //            .attr("y", function (d) {
        //                return y(d.votes) + 3;
        //            })
        //            .attr("dy", "1.75em")
        //            .text(function (d) {
        //                return d.album;
        //            });
        //
        //    })
        //}
        //
        //createAlbumVoteChart(null);
        //
        //function createSongVoteChart(album, start, redraw) {
        //
        //    isSong = true;
        //
        //    var promise = dataService.songVotesGet();
        //
        //    promise.then(function (response) {
        //
        //        var dataArr = [];
        //
        //        response.features.forEach(function (v) {
        //            dataArr.push(v.properties);
        //            songData.push(v.properties);
        //        });
        //
        //        var data = dataArr.filter(function (v) {
        //            return v.album == album;
        //        });
        //
        //        $(".chart").empty();
        //
        //        y.domain([0, d3.max(data, function (d) {
        //            return d.votes;
        //        })]);
        //
        //        var barWidth = width / data.length;
        //
        //        var bar = chart.selectAll("g")
        //            .data(data)
        //            .enter().append("g")
        //            .attr("transform", function (d, i) {
        //                return "translate(" + start + ",0)";
        //            });
        //
        //        //if drawing chart for the first time
        //        if (!redraw) {
        //
        //            bar.transition()
        //                .delay(function (d, i) {
        //                    return i * 150;
        //                })
        //                .attr("transform", function (d, i) {
        //                return "translate(" + i * barWidth + ",0)";
        //            });
        //        }
        //        else {
        //            bar.attr("transform", function (d, i) {
        //                return "translate(" + i * barWidth + ",0)";
        //            });
        //        }
        //
        //
        //        bar.append("rect")
        //            .attr("y", function (d) {
        //                return y(d.votes);
        //            })
        //            .attr("height", function (d) {
        //                return height - y(d.votes);
        //            })
        //            .attr("width", barWidth - 1);
        //
        //        bar.append("text")
        //            .attr("text-anchor", "middle")
        //            .attr("x", barWidth / 2)
        //            .attr("y", function (d) {
        //                return y(d.votes) + 3;
        //            })
        //            .attr("dy", "1.75em")
        //            .text(function (d) {
        //                return d.song;
        //            });
        //
        //        bar.on('click',function(d,i){
        //            //vote using the id of the song and the first round
        //            //var promise = dataService.vote(d.song_id, 1);
        //            //
        //            //promise.then(function(response) {
        //            //    console.log(response);
        //            //
        //            //    createSongVoteChart(album, start, true);
        //            //
        //            //});
        //
        //            //setTimeout(function () {
        //            //    createAlbumVoteChart(i);
        //            //}, 200)
        //        })
        //
        //    })
        //
        //
        //}

    });
angular.module('myApp')

    .controller('SongsCtrl', function ($scope,$http,$rootScope,dataService) {

        // TODO collect & show a list of selections somewhere

        $scope.albumSongHash = {};
        $scope.all_songs = [];
        $scope.searchText = '';
        $scope.selections =[];
        $scope.selection = '';

        $scope.selectSong = function(song){
            $scope.selection = song.title;

            if($scope.selections.indexOf(song.title) == -1){
                $scope.selections.push(song.title);
            } else {
                $scope.selections.splice($scope.selections.indexOf(song.title), 1);
                $scope.selection = '';
                // loop through all song, set
                $scope.removeSong(song.title);
            }
        };

        $scope.removeSong = function(song){
            // loop through all song, set
            $scope.all_songs.forEach(function(v){
                if (v.title == song){
                    v.selected = false;
                }
            });
        };

        var promise = dataService.albumsGet();

        promise.then(function(response){
            $scope.albumSongHash = response;

            return dataService.songsGet();
        }).then(function(response){
            $scope.all_songs = response;
        });
    });
/**
 * Created by DBaah on 2/3/16.
 */
angular.module('myApp')
    .controller('SubmissionCtrl', function ($rootScope, $scope, $http, $mdBottomSheet, dataService, $window) {


    });